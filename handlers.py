from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from config import ADMIN_CHAT_ID
from keyboards import make_choice_kb, make_time_kb, main_menu_kb, deal_type_kb
from utils import get_username_or_request, parse_ref
from db import save_to_db
from datetime import date

router = Router()

class Form(StatesGroup):
    method = State()
    deal_type = State()
    amount = State()
    date = State()
    time = State()
    contact = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
error_messages = {}

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ –Ω–∞ USDT –≤ –°–∞—Ä–∞—Ç–æ–≤–µ?\n\n"
        "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ, —Ä–∞–±–æ—Ç–∞–µ–º —Å 12:00 –¥–æ 20:00\n"
        "üíµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä—É–±–ª–∏, –¥–æ–ª–ª–∞—Ä—ã, swift, –∏–Ω–≤–æ–π—Å—ã\n\n"
        "üìÖ –•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è üëâ"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(text, reply_markup=main_menu_kb())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    username = get_username_or_request(message.from_user)
    await state.update_data(username=username)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–∞
    has_tag = message.from_user.username is not None
    await state.update_data(has_tag=has_tag)

@router.callback_query(F.data == "show_info")
async def show_info(callback: CallbackQuery):
    text = (
        "üìä *–£—Å–ª–æ–≤–∏—è –æ–±–º–µ–Ω–∞:*\n\n"
        "üî§ –†—É–±–ª—ë–≤—ã–π —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω A7A5:\n"
        "- 100 000‚Äì500 000‚ÇΩ ‚Üí 1% –∫–æ–º–∏—Å—Å–∏—è\n"
        "- –æ—Ç 500 000‚ÇΩ ‚Üí 0.8%\n\n"
        "üíµ USDT:\n"
        "- 100 000‚Äì500 000‚ÇΩ ‚Üí 1% –∫–æ–º–∏—Å—Å–∏—è\n"
        "- –æ—Ç 500 000‚ÇΩ ‚Üí 0.8%\n\n"
        "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏: 50 000‚ÇΩ\n"
        "üîê –ß–∏—Å—Ç—ã–π USDT, –¥–æ—Ö–æ–¥–∏—Ç –¥–æ Binance, Bybit –∏ –¥—Ä."
    )
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=main_menu_kb())

@router.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if callback.from_user.id in error_messages:
        for msg_id in error_messages[callback.from_user.id]:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception:
                pass
        error_messages[callback.from_user.id] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    username = get_username_or_request(callback.from_user)
    await state.update_data(username=username)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–∞
    has_tag = callback.from_user.username is not None
    await state.update_data(has_tag=has_tag)
    
    calendar_message = await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await SimpleCalendar().start_calendar())
    await state.update_data(calendar_message_id=calendar_message.message_id)
    await state.set_state(Form.date)

@router.callback_query(SimpleCalendarCallback.filter(), Form.date)
async def process_calendar(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, selected_date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
        if selected_date.date() < date.today():
            error_msg = await callback_query.message.answer("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_id = callback_query.from_user.id
            if user_id not in error_messages:
                error_messages[user_id] = []
            error_messages[user_id].append(error_msg.message_id)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            data = await state.get_data()
            if 'calendar_message_id' in data:
                try:
                    await callback_query.bot.delete_message(callback_query.message.chat.id, data['calendar_message_id'])
                except Exception:
                    pass
            
            calendar_message = await callback_query.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:", reply_markup=await SimpleCalendar().start_calendar())
            await state.update_data(calendar_message_id=calendar_message.message_id)
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = selected_date.strftime("%d.%m.%Y")  # –î–î.–ú–ú.–ì–ì–ì–ì
        raw_date = selected_date.strftime("%Y-%m-%d")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
        await state.update_data(date=raw_date, formatted_date=formatted_date)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        await callback_query.message.delete()
        
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        user_id = callback_query.from_user.id
        if user_id in error_messages:
            for msg_id in error_messages[user_id]:
                try:
                    await callback_query.bot.delete_message(callback_query.message.chat.id, msg_id)
                except Exception:
                    pass
            error_messages[user_id] = []
        
        time_message = await callback_query.message.answer("üïí –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=make_time_kb())
        await state.update_data(time_message_id=time_message.message_id)
        await state.set_state(Form.time)

@router.callback_query(Form.time)
async def choose_time(callback: CallbackQuery, state: FSMContext):
    await state.update_data(time=callback.data)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    await callback.message.delete()
    
    deal_type_message = await callback.message.answer("üí± –ö–∞–∫–æ–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å?", reply_markup=deal_type_kb())
    await state.update_data(deal_type_message_id=deal_type_message.message_id)
    await state.set_state(Form.deal_type)

@router.callback_query(Form.deal_type)
async def select_deal_type(callback: CallbackQuery, state: FSMContext):
    deal_type = callback.data.replace("deal_", "")
    deal_type_display = "USDT" if deal_type == "usdt" else "A7A5"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
    currency = "$" if deal_type == "usdt" else "‚ÇΩ"
    
    await state.update_data(
        deal_type=deal_type,
        deal_type_display=deal_type_display,
        currency=currency
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
    await callback.message.delete()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    currency_text = "–¥–æ–ª–ª–∞—Ä–∞—Ö" if deal_type == "usdt" else "—Ä—É–±–ª—è—Ö"
    
    amount_message = await callback.message.answer("üí∞ –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É?", reply_markup=make_choice_kb())
    await state.update_data(amount_message_id=amount_message.message_id)
    await state.set_state(Form.method)

@router.callback_query(Form.method)
async def choose_method(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
    await callback.message.delete()
    
    data = await state.get_data()
    currency_text = "–¥–æ–ª–ª–∞—Ä–∞—Ö" if data.get('deal_type') == "usdt" else "—Ä—É–±–ª—è—Ö"
    
    if callback.data == "amount":
        amount_input_message = await callback.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–±–º–µ–Ω–∞ (–≤ {currency_text}):")
        await state.update_data(amount_input_message_id=amount_input_message.message_id)
        await state.set_state(Form.amount)
    else:  # callback.data == "manual"
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É, —Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∏ –∑–∞—è–≤–∫—É —Å "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        await state.update_data(amount='–ù–µ —É–∫–∞–∑–∞–Ω–æ', has_amount=False)
        data = await state.get_data()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await generate_final_message(callback.message, state, data)

@router.message(Form.amount)
async def get_amount(message: Message, state: FSMContext):
    text = message.text.strip().replace(" ", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–µ–ª
    if not text.isdigit():
        error_msg = await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        user_id = message.from_user.id
        if user_id not in error_messages:
            error_messages[user_id] = []
        error_messages[user_id].append(error_msg.message_id)
        return
    
    amount = int(text)
    data = await state.get_data()
    is_usdt = data.get('deal_type') == "usdt"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É (50000 —Ä—É–±–ª–µ–π –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USD)
    min_amount = 500 if is_usdt else 50000  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 1 USD = 100 RUB –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    if amount < min_amount:
        min_display = min_amount
        currency_text = "–¥–æ–ª–ª–∞—Ä–∞—Ö" if is_usdt else "—Ä—É–±–ª—è—Ö"
        error_msg = await message.answer(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî {min_display} {data.get('currency', '‚ÇΩ')}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        user_id = message.from_user.id
        if user_id not in error_messages:
            error_messages[user_id] = []
        error_messages[user_id].append(error_msg.message_id)
        return

    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    user_id = message.from_user.id
    if user_id in error_messages:
        for msg_id in error_messages[user_id]:
            try:
                await message.bot.delete_message(message.chat.id, msg_id)
            except Exception:
                pass
        error_messages[user_id] = []

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    if 'amount_input_message_id' in data:
        try:
            await message.bot.delete_message(message.chat.id, data['amount_input_message_id'])
        except Exception:
            pass

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_amount = f"{amount:,}".replace(",", " ")
    
    await state.update_data(amount=str(amount), formatted_amount=formatted_amount, has_amount=True)
    data = await state.get_data()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await generate_final_message(message, state, data)

async def generate_final_message(message, state, data):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–≥–∞
    has_tag = data.get('has_tag', False)
    username = data.get('username', f"ID: {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    formatted_date = data.get('formatted_date', data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))
    time = data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    deal_type_display = data.get('deal_type_display', data.get('deal_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ').upper())
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    amount = data.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    has_amount = data.get('has_amount', False) if amount != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–æ–π –∏–ª–∏ –±–µ–∑
    if has_amount:
        currency = data.get('currency', '')
        amount_display = f"{data.get('formatted_amount', amount)} {currency}"
    else:
        amount_display = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    text = (
        f"‚úÖ *–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n"
        f"üìù *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n"
        f"‚Ä¢ –¢–∏–ø —Å–¥–µ–ª–∫–∏: *{deal_type_display}*\n"
        f"‚Ä¢ –°—É–º–º–∞: *{amount_display}*\n"
        f"‚Ä¢ –î–∞—Ç–∞: *{formatted_date}*\n"
        f"‚Ä¢ –í—Ä–µ–º—è: *{time}*\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–µ–≥–∞
    if has_tag:
        text += (
            f"\n‚ú® –û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram "
            f"–≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
        )
    else:
        text += (
            f"\n‚ö†Ô∏è –î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: "
            f"@FedulAI –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏."
        )
    
    await message.answer(text, parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        admin_text = (
            f"üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {username}\n"
            f"üí± –¢–∏–ø —Å–¥–µ–ª–∫–∏: {deal_type_display}\n"
            f"üí∞ –°—É–º–º–∞: {amount_display}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"üïí –í—Ä–µ–º—è: {time}\n"
        )
        await message.bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode="Markdown")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
